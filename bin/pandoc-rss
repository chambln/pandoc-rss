#!/bin/sh

usage ()
{
    cat <<EOF
Usage: ${0##*/} [OPTIONS] [FILE]...
  OPTION            EXAMPLE ARGUMENT
  -t TITLE         'Example Feed'
  -d DESCRIPTION   'Short description of the feed'
  -l LINK           http://example.net
  -f GUID_FORMAT    blog/%.html  =>  http://example.net/blog/%s.html
  -w WEBMASTER     'webmaster@example.net (Real Name)'
  -c COPYRIGHT     'Year © Name, CC BY-SA 4.0'
  -n LANGUAGE       en-GB
EOF
}

get_language_code ()
{
    [ -n "$LANG" ] || exit 1
    code=${LANG%%.*}
    primary_code=${code%%_*}
    subcode=${code#$primary_code}
    subcode=${subcode#_}
    printf %s\\n "$primary_code${subcode:+-$subcode}"
}

get_user_fullname ()
{
    while IFS=':' read -r user _ _ _ gecos _
    do
	if [ x"$user" = x"$LOGNAME" ]
	then
	    user_fullname="${gecos%%,*}"
	    [ -n "$user_fullname" ] || exit 1
	    printf %s\\n "$user_fullname"
	    return 0
	fi
    done < /etc/passwd
    return 1
}

get_user_contact ()
{
    [ -n "$EMAIL" ] || return 1
    user_fullname="${NAME:-$(get_user_fullname)}"
    if [ -n "$user_fullname" ]
    then
	printf '%s (%s)\n' "$EMAIL" "$user_fullname"
    else
	printf '%s\n' "$EMAIL"
    fi
}

get_metadata_value ()
{
    key=$1
    shift
    value=$(pandoc --template="$templates_dir/$key.value" "$@")
    [ -n "$value" ] || return 1
    printf %s\\n "$value"
}

# Print the guid element for an input_file.
# e.g. guid_format=http://example.net/%s.html
#      input_file=path/to/fox-in-socks.md
#   => http://example.net/fox-in-socks.html
get_guid ()
{
    [ -n "${guid_format-}" ] || return 1
    input_file=$1
    shift
    filename=${input_file##*/}
    basename=${filename%.*}
    printf "$guid_format" "$basename"
}

get_date ()
{
    input_file=$1
    shift
    if date=$(get_metadata_value date "$input_file")
    then
	/usr/bin/date --utc --date "$date" +'%a, %d %b %Y %T +0000'
    fi
}

generate_feed_item ()
{
    input_file=$1
    shift

    if guid=$(get_guid "$input_file")
    then
	attribute=" isPermLink=\"$guid_is_perma_link\""
	set -- -V "guid:<guid${attribute-}>$guid</guid>" "$@"
    fi

    if date=$(get_date "$input_file")
    then
	set -- -V "date:$date" "$@"
    fi

    pandoc --template="$item_template" "$@" "$input_file"
}

generate_feed_items ()
{
    for input_file do
	generate_feed_item "$input_file"
    done
}

print_xml_element ()
{
    [ -n "$2" ] || return 1
    printf '<%s>%s</%s>\n' "$1" "$2" "$1"
}

generate_standalone_feed ()
{
    channel_title=${channel_title:-${channel_link#*://}}
    channel_description=${channel_description:-Posts from $channel_title}
    
    if [ -z "${channel_webmaster-}" ]
    then
	if user_contact=$(get_user_contact)
	then
	    channel_webmaster=$user_contact
	fi
    fi

    if [ -z "$channel_language" ]
    then
	if language_code=$(get_language_code)
	then
	    channel_language=$language_code
	fi
    fi

    echo '<?xml version="1.0" encoding="UTF-8" ?>'
    echo '<rss version="2.0">'
    echo '<channel>'
    print_xml_element title "$channel_title"
    print_xml_element link "$channel_link"
    print_xml_element description "$channel_description"
    print_xml_element language "$channel_language"
    print_xml_element webMaster "$channel_webmaster"
    print_xml_element copyright "$channel_copyright"
    print_xml_element docs https://www.rssboard.org/rss-specification
    echo '<generator>Pandoc RSS</generator>'
    generate_feed_items "$@"
    echo '</channel>'
    echo '</rss>'
}

description_source=body
guid_is_perma_link=true
standalone=false
guid_optarg=auto
while getopts t:l:d:w:c:n:o:f:hp name
do
    case "$name" in
    t)  channel_title=$OPTARG ;;
    l)  channel_link=${OPTARG%/} ;;
    d)  channel_description=$OPTARG ;;
    w)  channel_webmaster=$OPTARG ;;
    c)  channel_copyright=$OPTARG ;;
    n)  channel_language=$OPTARG ;;
    o)  description_source=$OPTARG
	case $description_source in
	body|description|subtitle|abstract|none) ;;
        *)
	    >&2 printf 'Invalid arg ‘%s’ for -%s option\n' "$OPTARG" "$name"
	    exit 1
	esac
	;;
    f)  guid_optarg=$OPTARG ;;
    h)  usage; exit ;;
    p)  guid_is_perma_link=false ;;
    esac
done
shift $((OPTIND - 1))

share=${0%/*}/../share/${0##*/}
templates_dir=$share/data/templates

item_template="$templates_dir/item-with-${description_source}.xml"

case $guid_optarg in
    auto) guid_optarg=%s.html
esac
case $guid_optarg in
    omit)      guid_format= ;;
    *://*%s*)  guid_format=$guid_optarg ;;
    *%s*)      if [ -n "${channel_link-}" ]
	       then
		   guid_format=$channel_link/${guid_optarg#/}
	       fi
	       ;;
    *)         >&2 printf 'Invalid guid format ‘%s’\n' "$guid_optarg"
	       exit 1
esac

if [ -n "${channel_link-}" ]
then
    generate_standalone_feed "$@"
else
    generate_feed_items "$@"
fi
