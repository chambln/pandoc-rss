#!/bin/sh

usage ()
{
    >&2 printf 'Usage: %s [OPTIONS] [FILE]...\n' "${0##*/}"
}

get_metadata_value ()
{
    key=$1
    shift
    pandoc --template="$templates_dir/$key.value" "$@"
}

# Turns a filename into a permalink.
# e.g. permalink_format=http://example.net/%s.html
#      input_file=path/to/fox-in-socks.md
#   => http://example.net/fox-in-socks.html
get_permalink ()
{
    if [ -z "${permalink_format-}" ]
    then
	return 1
    fi
    input_file=$1
    shift
    filename=${input_file##*/}
    basename=${filename%.*}
    printf "$permalink_format" "$basename"
}

get_date ()
{
    input_file=$1
    shift
    if date=$(get_metadata_value date "$input_file")
    then
	/usr/bin/date --utc --date "$date" +'%a, %d %b %Y %T +0000'
    fi
}

generate_feed_item ()
{
    input_file=$1
    shift

    if permalink=$(get_permalink "$input_file")
    then
	set -- -V "permalink:$permalink" "$@"
    fi

    if date=$(get_date "$input_file")
    then
	set -- -V "date:$date" "$@"
    fi

    pandoc --template="$item_template" "$@" "$input_file"
}

while true
do
    case "$1" in
    -d|--description-source)
	description_source=${2-}
	case $description_source in
	body|description|subtitle|abstract|none) ;;
        *) >&2 printf 'Invalid description source ‘%s’\n' "$description_source"
	   >&2 echo 'Valid sources: body, description, subtitle, abstract, none'
	   exit 1
	esac
	shift 2
	;;
    -p|--permalink-format)
	permalink_format=${2-}
	case $permalink_format in
	    *%s*) ;;
	    *) >&2 echo 'Permalink format string must contain ‘%s’'
	       exit 1
	esac
	shift 2
	;;
    -h|--help)  usage; exit ;;
    --)         shift; break ;;
    -*)         >&2 printf 'No such option ‘%s’\n' "$1"; exit 1 ;;
    *)          break
    esac
done

share=${0%/*}/../share/${0##*/}
templates_dir=$share/data/templates

item_template="$templates_dir/item-with-${description_source-body}.xml"

for input_file do
    generate_feed_item "$input_file"
done
